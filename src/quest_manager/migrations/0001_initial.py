# Generated by Django 1.11.17 on 2018-12-28 03:51

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import prerequisites.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('courses', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='icons/')),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'campaign',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='CommonData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
                ('instructions', models.TextField()),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('xp', models.PositiveIntegerField(default=0)),
                ('datetime_created', models.DateTimeField(auto_now_add=True)),
                ('datetime_last_edit', models.DateTimeField(auto_now=True)),
                ('short_description', models.CharField(blank=True, max_length=500, null=True)),
                ('visible_to_students', models.BooleanField(default=True)),
                ('archived', models.BooleanField(default=False, help_text='Setting this will prevent it from appearing in admin quest lists.  To un-archive a quest, you will need to access it through Django Admin.')),
                ('sort_order', models.IntegerField(default=0)),
                ('max_repeats', models.IntegerField(default=0, help_text='0 = not repeatable; -1 = unlimited repeats')),
                ('hours_between_repeats', models.PositiveIntegerField(default=0)),
                ('date_available', models.DateField(default=django.utils.timezone.now)),
                ('time_available', models.TimeField(default=datetime.time(0, 0))),
                ('date_expired', models.DateField(blank=True, help_text='If both Date and Time expired are blank, then the quest never expires', null=True)),
                ('time_expired', models.TimeField(blank=True, help_text='If Date expired is blank, expire at this time every day                                     and reappear at midnight. If this is blank, then midnight assumed.', null=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='icons/')),
                ('verification_required', models.BooleanField(default=True, help_text='Teacher must approve submissions of this quest.  If                                                 unchecked then submissions will automatically be approved and XP                                                 granted without the teacher seeing the submission.')),
                ('hideable', models.BooleanField(default=True, help_text='Students can choose to hide this quest from their list of                                                  available quests. ')),
                ('available_outside_course', models.BooleanField(default=False, help_text='Allows student to view and submit this quest without having joined a course.  E.g. for quests you might still want available to past students.')),
                ('instructions', models.TextField(blank=True)),
                ('submission_details', models.TextField(blank=True)),
                ('instructor_notes', models.TextField(blank=True, help_text='This field is only visible to Staff.                                         Use it to place answer keys or other notes.', null=True)),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='quest_manager.Category')),
                ('common_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='quest_manager.CommonData')),
                ('editor', models.ForeignKey(blank=True, help_text='Provides a student TA access to work on the draft of this quest.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quest_editor', to=settings.AUTH_USER_MODEL)),
                ('specific_teacher_to_notify', models.ForeignKey(blank=True, help_text='Notifications related to this quest will be sent to this teacher even if they do not teach the student.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'ordering': ['-sort_order', '-time_expired', '-date_expired', 'name'],
            },
            bases=(models.Model, prerequisites.models.IsAPrereqMixin),
        ),
        migrations.CreateModel(
            name='QuestSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordinal', models.PositiveIntegerField(default=1, help_text='indicating submissions beyond the first for repeatable quests')),
                ('is_completed', models.BooleanField(default=False)),
                ('first_time_completed', models.DateTimeField(blank=True, null=True)),
                ('time_completed', models.DateTimeField(blank=True, null=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('time_approved', models.DateTimeField(blank=True, null=True)),
                ('time_returned', models.DateTimeField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('game_lab_transfer', models.BooleanField(default=False, help_text='XP not counted')),
                ('flagged_by', models.ForeignKey(blank=True, help_text='flagged by a teacher for follow up', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quest_submission_flagged_by', to=settings.AUTH_USER_MODEL)),
                ('quest', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='quest_manager.Quest')),
                ('semester', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.Semester')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quest_submission_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['time_approved', 'time_completed'],
            },
        ),
        migrations.CreateModel(
            name='TaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.SlugField(choices=[('python', 'python'), ('django', 'django')])),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
    ]
