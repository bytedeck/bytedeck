# /etc/nginx/sites-enabled/bytedeck.conf

# the upstream uwsgi component nginx needs to connect to
upstream django {
    # server unix:/bytedeck-volume/app.sock; # for a file socket
    server web:8000; # for a web port socket (we'll use this first)
}

server {

    # Non root user can listen to a port>1024 only. Expose it through 443 using port mapping.
    listen 8088 ssl http2; # managed by Certbot
    listen [::]:8088 ssl http2;

    server_name bytedeck.com *.bytedeck.com;

    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    ## Deny illegal Host headers
    if ($host !~* ^(bytedeck.com|.+\.bytedeck.com)$ ) {
        return 444;
    }

    client_max_body_size 17M;

    # Temp workaround to serve hardcoded media files(this causes redundant redirects to CDN)
    location ~ /media/(.*)$ {
        return 301  https://d10ge8y4vx8iud.cloudfront.net/public_media/$1;
    }

    # Enable below if media files to be served from nginx instead of S3
    # location /media  {
    #     alias /var/www/bytedeck/media;

    #     # Limiting Bandwidth for Particular URLs
    #     # https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/#Limiting-Bandwidth-for-Particular-URLs
    #     # This will be bad for loading portfolios, is it needed?
    #     #limit_rate_after 500k;
    #     #limit_rate 50k;

    #     # Setting-Cache-Headers
    #     # https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/#Setting-Cache-Headers
    #     location ~* \.(?:jpg|jpeg|gif|png|ico|woff2)$ {
    #         expires 1M;
    #         add_header Cache-Control "public";
    #         access_log off;
    #     }

    # }

    location /static {
        alias /var/www/bytedeck/static;

        # https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/#Setting-Cache-Headers
        location ~* \.(?:jpg|jpeg|gif|png|ico|woff2)$ {
            expires 1M;
            add_header Cache-Control "public";
            access_log off;
        }

        # https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/#Optimizing-Logging
        location ~* \.(?:js|css)$ {
            access_log off;
        }

    }


    location / {
        uwsgi_pass django;
        include /etc/nginx/uwsgi_params;
    }

    ssl_certificate /etc/letsencrypt/live/bytedeck.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/bytedeck.com/privkey.pem;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    # intermediate configuration

    ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA$
    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
    ssl_prefer_server_ciphers off;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security "max-age=63072000" always;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate /etc/letsencrypt/live/bytedeck.com/chain.pem;

    # GZIP SETTINGS: https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/#Enabling-Gzip-Compression-for-HTML-CSS-and-JavaScript-Files
    gzip on;
    gzip_types application/xml application/json text/plain text/css text/xml text/javascript application/javascript application/x-javascript;
    gzip_vary on; # tells proxies to cache both gzipped and regular versions of a resource
    gzip_comp_level 6;
    gzip_min_length 500; # don't compress anything smaller than

}

server {
    # https://serversforhackers.com/c/redirect-http-to-https-nginx
    # redirect all http requests to port 443 (https)
    listen 8080;
    listen [::]:8080;
    server_name bytedeck.com *.bytedeck.com;
    return 301 https://$host$request_uri;
}

server {
    # drop connections that aren't directly to a server_name defined in one of the above blocks
    listen 8080 default_server;
    listen [::]:8080 default_server;
    server_name _;
    return 444;
}
